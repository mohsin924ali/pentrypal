// ========================================
// Receipt Utilities
// ========================================

import type { ShoppingItem, ShoppingList } from '../../../../shared/types/lists';

export interface ReceiptData {
  listName: string;
  totalItems: number;
  completedItems: number;
  totalSpent: number;
  collaboratorsCount: number;
  purchasedItems: ShoppingItem[];
  spendingSummary: Record<string, { amount: number; items: number }>;
  currency: string;
  generatedAt: string;
}

export class ReceiptUtils {
  /**
   * Extract receipt data from shopping list
   */
  static extractReceiptData(
    list: ShoppingList,
    spendingSummary: Record<string, { amount: number; items: number }>,
    totalSpent: number
  ): ReceiptData {
    const purchasedItems = list.items?.filter(item => item.completed && item.purchasedAmount) || [];

    return {
      listName: list.name,
      totalItems: list.items?.length || 0,
      completedItems: list.items?.filter(item => item.completed).length || 0,
      totalSpent,
      collaboratorsCount: list.collaborators?.length || 1,
      purchasedItems,
      spendingSummary,
      currency: list.budget?.currency || 'USD',
      generatedAt: new Date().toISOString(),
    };
  }

  /**
   * Calculate spending statistics
   */
  static calculateSpendingStats(
    spendingSummary: Record<string, { amount: number; items: number }>
  ) {
    const collaborators = Object.keys(spendingSummary);
    const totalCollaborators = collaborators.length;
    const averageSpending =
      totalCollaborators > 0
        ? Object.values(spendingSummary).reduce((sum, user) => sum + user.amount, 0) /
          totalCollaborators
        : 0;
    const highestSpender =
      collaborators.length > 0
        ? collaborators.reduce((highest, current) => {
            const currentAmount = spendingSummary[current]?.amount || 0;
            const highestAmount = spendingSummary[highest]?.amount || 0;
            return currentAmount > highestAmount ? current : highest;
          })
        : null;

    return {
      totalCollaborators,
      averageSpending,
      highestSpender,
      highestAmount: highestSpender ? spendingSummary[highestSpender]?.amount || 0 : 0,
    };
  }

  /**
   * Format receipt filename for sharing
   */
  static generateReceiptFileName(listName: string): string {
    const sanitizedName = listName.replace(/[^a-zA-Z0-9\s]/g, '').replace(/\s+/g, '_');
    const timestamp = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
    return `${sanitizedName}_Receipt_${timestamp}.png`;
  }

  /**
   * Validate receipt data completeness
   */
  static validateReceiptData(receiptData: ReceiptData): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];

    if (!receiptData.listName || receiptData.listName.trim().length === 0) {
      errors.push('List name is required');
    }

    if (receiptData.totalItems < 0) {
      errors.push('Invalid total items count');
    }

    if (receiptData.completedItems < 0 || receiptData.completedItems > receiptData.totalItems) {
      errors.push('Invalid completed items count');
    }

    if (receiptData.totalSpent < 0) {
      errors.push('Invalid total spent amount');
    }

    if (!receiptData.currency || receiptData.currency.length === 0) {
      errors.push('Currency is required');
    }

    return {
      isValid: errors.length === 0,
      errors,
    };
  }

  /**
   * Get receipt summary text for sharing
   */
  static getReceiptSummaryText(receiptData: ReceiptData): string {
    const stats = this.calculateSpendingStats(receiptData.spendingSummary);

    return `ðŸ“‹ ${receiptData.listName}
    
ðŸ“Š Summary:
â€¢ Items: ${receiptData.completedItems}/${receiptData.totalItems} completed
â€¢ Total Spent: ${receiptData.totalSpent.toFixed(2)} ${receiptData.currency}
â€¢ Collaborators: ${receiptData.collaboratorsCount}
${stats.highestSpender ? `â€¢ Top Spender: ${stats.highestSpender} (${stats.highestAmount.toFixed(2)} ${receiptData.currency})` : ''}

ðŸ“± Generated by PentryPal`;
  }

  /**
   * Check if receipt has sufficient data for generation
   */
  static hasReceiptData(list: ShoppingList): boolean {
    return !!(
      list &&
      list.name &&
      list.items &&
      list.items.length > 0 &&
      list.items.some(item => item.completed)
    );
  }

  /**
   * Get receipt generation timestamp
   */
  static getReceiptTimestamp(): string {
    return new Date().toLocaleString('en-US', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      hour12: true,
    });
  }
}
